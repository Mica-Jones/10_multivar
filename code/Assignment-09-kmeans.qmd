---
title: "Assignment 9 - K-means"
author: "Micah Jones"  
format:
  html:
    code-fold: true 
    embed-resources: true
    toc: true
    number-sections: true
    theme: cerulean
---

# Goal of this assignment  
The goal of this assignment is for you to **explore the k-means algorithm** learned in class.  

In specific, you will be asked to:  
  - Use a different number of k than what we did in class,  
  - Validate the results of the new model, and  
  - Compare your results with those found in class  

# Instructions  
You will first need to watch (and code along with) the following k-means video:

  - k-means lab: https://youtu.be/GFgMp5tYiMU?si=CI0E-2r-cYZLGVL1 (start from beginning of video, watch till the 01:10)  
  - The partial script for the video above is in our GitHub repository, 04-classcode, **03-25_multivar_kmeans_partial.qmd**. Move the script mentioned above into the `code` subfolder of your `10_multivar` project
  
**AFTER watching the video and developing the code in class**, then start working on this HW assignment (instructions below):

  - Move this script into the `code` subfolder of your `10_multivar` project  
  - On this script, fill your name under the `title` section of the YAML  
  - Go back to the class k-means script, choose a different number of k than what we did in class, and run it.    
```{r package}
#| message: false
#| warning: false

#install.packages("ggcorrplot")
#install.packages("factoextra")
#install.packages("ggpmisc")

library(tidyverse)
library(ggcorrplot)
library(broom)
library(car)
library(factoextra)
library(ggpmisc)
```
```{r import}
weather <- read.csv("../data/weather_monthsum.csv")
```
```{r weather_n}
weather_n <- weather %>% 
  dplyr::select(-c(year:strength_gtex))
```
```{r normalize}
weather_norm <- weather_n %>%
  mutate(across(everything(), ~scale(.x)))
```
```{r k9}
mod_km9 <- kmeans(weather_norm,
                 centers = 9, 
                 nstart = 15
                 )
```
```{r k4}
mod_km4 <- kmeans(weather_norm,
                 centers = 4, 
                 nstart = 10
                 )
```

# Questions 

## 1. What number of k did you select? Why?  

```{r choosing k silhouette, message: false, warning: false}


# Silhouette width
fviz_nbclust(weather_norm, 
             method = "s",
             k.max = 10,
             FUNcluster = kmeans) 

```
  
There was a second (but smaller) peak in average silhouette width at 9 clusters, so I chose to explore that to see where the additional clusters would be drawn. For the larger number of clusters.

## 2. How many observations are there in each cluster?  

```{r}
weather %>%
  mutate(cluster = mod_km9$cluster) %>%
  group_by(cluster) %>%
  tally()
```
Clusters 1-9 had 90, 152, 103, 44, 16, 118, 74, 56, and 45 observations, respectively. Interestingly, the small cluster of 16 observed in the 4 cluster run was fully conserved here.

## 3. Using the `fviz_cluster()` function, import here the original plot with k=4 did in class, and the new one with the number of k you selected for this exercise. How do they visually compare? Which one seems to be a better choice, and why?  

### 4 Clusters
```{r kmeans plot 4}
fviz_cluster(mod_km4,
             data = weather_norm
             )
```
### 9 Clusters

```{r kmeans plot 9}
fviz_cluster(mod_km9,
             data = weather_norm
             )
```

There are some similarities between the two; for instance the cluster of 16 observations on the far left was conserved, and the far right observations were grouped at least partially in a similar manner.   
In the k=9 the clusters in the center overlap to a significant degree, which was not seen in the two central clusters with k=4. I was surprised with the way it handled some regions; visually, it seems the far right cluster could be divided into 2 far more easily than what the algorithm did with the middle clusters.  
Overall, I would say that k=4 is better, as suggested by the silhouette width plot. There is less overlap between clusters and cluster boundaries in k=4 generally follow recognizable patterns in the data.


# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.  

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE` (I'll demo this in a moment).  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one (I'lld demo this in a moment).  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `Assignment-09-kmeans-LASTNAME.html`.    

For ex., mine would be `Assignment-09-kmeans-Bastos.html`.

Submit your work by uploading the **html** file to **eLC Assignment #9 - K-means** by April 3rd 11:59 pm.  
  




